@page "/"
@using Microsoft.Extensions.Logging
@*@inject ILogger<Index> log*@
@inject ILoggedInUserModel loggedInUser
@inject IProductEndPoint _productEndPoint
@inject NavigationManager navigationManager
@inject ISessionStorageService sessionStorage



<AuthorizeView>
    <Authorized>
        @*<p>Welcome, @context.User.Identity.Name</p>*@
        <p>Welcome, @loggedInUser.FirstName</p>
    </Authorized>
    @*<NotAuthorized>
            <p>You are signed out!!!</p>
        </NotAuthorized>*@
</AuthorizeView>
<AuthorizeView Roles="Admin">
    <p>Hello, Admin</p>
</AuthorizeView>
@if (Products == null)
{
    <section class="section-loader">
        <div class="loader">
            <span style="--i:1;"></span>
            <span style="--i:2;"></span>
            <span style="--i:3;"></span>
            <span style="--i:4;"></span>
            <span style="--i:5;"></span>
            <span style="--i:6;"></span>
            <span style="--i:7;"></span>
            <span style="--i:8;"></span>
            <span style="--i:9;"></span>
            <span style="--i:10;"></span>
            <span style="--i:11;"></span>
            <span style="--i:12;"></span>
            <span style="--i:13;"></span>
            <span style="--i:14;"></span>
            <span style="--i:15;"></span>
            <span style="--i:16;"></span>
            <span style="--i:17;"></span>
            <span style="--i:18;"></span>
            <span style="--i:19;"></span>
            <span style="--i:20;"></span>
        </div>
    </section>
}
else
{
    <div>
        <div class="row">
            <div class="col-12">
                @*<div class="search-box">*@
                <input type="text"
                       @oninput="OnTextChange"
                       placeholder="Search Product By Name" />
                <i class="fas fa-search fa-lg"></i>
                <a href="#" @onclick="ReviewOrderBtn" style="margin-left:20px">
                    <i class="fas fa-shopping-cart fa-lg"></i>
                    <span class='badge badge-warning' id='lblCartCount'>@Cart.Count</span>
                </a>
                @*</div>*@
            </div>
        </div>
        <div class="row" style="margin-top: 40px">
            @foreach (var product in Products)
            {
                <ProductComponent Product="@product" OnAddToCart="HandleAddToCart"
                                  OnRemoveFromCart="HandleRemoveFromCart"
                                  OnAdd="HandleQuantity" />
            }
        </div>
    </div>
}

@code{

    public List<ProductModel> Products { get; set; }
    public List<ProductModel> OriginalList { get; set; }
    public List<CartModel> Cart { get; set; } = new List<CartModel>();
    public CartModel cartModel { get; set; }
    private int quantityPurchased;
    protected override async Task OnInitializedAsync()
    {
        var c = await sessionStorage.GetItemAsync<List<CartModel>>("cart");
        if (c?.Count > 0)
        {
            Cart = new List<CartModel>(c);
        }
        //var products = await _productEndPoint.GetAll();
        //Products = new List<ProductModel>(products);
        var products = await _productEndPoint.GetAll();
        Products = new List<ProductModel>(products);
        OriginalList = new List<ProductModel>(products);
    }
    private void OnTextChange(ChangeEventArgs args)
    {
        Products = new List<ProductModel>(OriginalList);
        Products = new List<ProductModel>(OriginalList.Where(x => x.Description
        .ToUpper().Contains(args.Value.ToString().ToUpper())));
    }
    private void HandleAddToCart(ProductModel product)
    {
        int index = Cart.FindIndex(x => x.Product.Id.Equals(product.Id));
        if (index < 0)
        {
            cartModel = new CartModel();
            cartModel.Product = product;
            cartModel.Quantity = quantityPurchased;
            Cart.Add(cartModel);
        }
        else
        {
            Cart[index].Quantity = quantityPurchased;
        }

    }
    private void HandleQuantity(int quantity)
    {
        quantityPurchased = quantity;
    }
    private void HandleRemoveFromCart(ProductModel product)
    {

        int index = Cart.FindIndex(x => x.Product.Id.Equals(product.Id));
        //int index = Cart.IndexOf()
        if (index >= 0)
        {
            Cart.RemoveAt(index);
        }

    }
    private async void ReviewOrderBtn()
    {
        await sessionStorage.SetItemAsync("cart", Cart);
        navigationManager.NavigateTo("/revieworder");
    }
}
