
@page "/login"
@page "/login/{Number:int}"
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IAPIHelper apiHelper
@inject ILoggedInUserModel loggedInUser

<EditForm Model="@user" OnValidSubmit="@ValidateUser">
    <div>
        <br /><br /><br /><br /><br />
    </div>
    <div>
        <h3 style="font-weight:bold; color:purple">Tulip Store Login</h3>
    </div>
    <div>
        <br />
    </div>
    <div class="col-12 row">
        <input class="form-control col-12" @bind="@user.Email" placeholder="Username" />
    </div>
    <br />
    <div class="col-12 row">
        <input type="password" class="form-control col-12" @bind="@user.Password" placeholder="password" />
    </div>
    <br />
    <div class="col-12 row">
        <span class="col-12"></span>
        <input type="submit" class="form-control col-6 btn btn-primary" value="Login" />
        @*<a href="/signup" class="col-3">Sign up</a>*@
        @if (navigationManager.Uri == "https://localhost:44314/login/1")
        {
            <a href="/signup/1" class="col-3">Sign up</a>
        }
        else
        {
            <a href="/signup" class="col-3">Sign up</a>
        }
    </div>
    <br />
    <div class="col-12 row" style="text-align:left; font-weight:bold">
        <span class="col-12">@LoginMessage</span>
    </div>
</EditForm>


@code {
    [Parameter]
    public int Number { get; set; }
    private RegisterModel user;
    public string LoginMessage { get; set; }

    protected override Task OnInitializedAsync()
    {
        user = new RegisterModel();
        user.Email = "iyad@shobaki.com";
        user.Password = "Pwd12345.";

        return base.OnInitializedAsync();
    }

    private async Task<bool> ValidateUser()
    {
        // Call ApiHelper
        try
        {

            var result = await apiHelper.Authenticate(user.Email, user.Password);

            // Capture more information about the user
            await apiHelper.GetLoggendInUserInfo(result.Access_Token);

            await ((CustomAuthenticationStateProvider)authenticationStateProvider)
           .MarkUserAsAuthenticated(loggedInUser);

            if (Number == 0)
            {

                navigationManager.NavigateTo("/");
            }
            else
            {
                navigationManager.NavigateTo("/revieworder");
            }

            //await sessionStorage.SetItemAsync("email", user.Email);
            //await sessionStorage.SetItemAsync("token", result.Access_Token);
        }
        catch (Exception)
        {
            LoginMessage = "Invalid username or password";
        }




        return await Task.FromResult(true);
    }
}
