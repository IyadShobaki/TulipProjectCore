@page "/revieworder"
@inject ISessionStorageService sessionStorage
@inject IConfiguration config
@inject ILoggedInUserModel loggedInUser
@inject NavigationManager navigationManager

<h3 style="text-align:center; margin-bottom:20px; font-weight:bold"><span>Order Summary</span></h3>

<div class="col-12">
    <table class="table table-striped" style="text-align:center">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Image</th>
                <th scope="col">Description</th>
                <th scope="col">Quantity</th>
                <th scope="col">SubToal</th>
                <th scope="col">Tax</th>
                <th scope="col">Total</th>
                <th scope="col">Change Quantity | Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var c in Cart)
            {
                <CartItemComponent CartItem="@c" OnRemoveCartItem="HandleDeleteItem"
                                   OnChangeItemQuantity="HandleQuantityChange" />
            }
        </tbody>
        @if (Cart.Count > 0)
        {
            <tfoot class="" style="font-weight:bold">
                <tr>

                    <td colspan="2" style="text-align:right">Total Items:</td>
                    <td>@totalItems</td>
                </tr>
                <tr>
                    <td colspan="2"></td>
                    <td colspan="1" style="text-align:right">SubTotal:</td>
                    <td colspan="1">@string.Format("{0:C}", totalSubTotal)</td>
                </tr>
                <tr>
                    <td colspan="3"></td>
                    <td colspan="1" style="text-align:right">Tax:</td>
                    <td colspan="1">@string.Format("{0:C}", totalTax)</td>
                </tr>
                <tr style="background-color:aqua">
                    <td colspan="4"></td>
                    <td colspan="1" style="text-align:right;">Total:</td>
                    <td colspan="1">@string.Format("{0:C}", totalTotal)</td>
                    <td colspan="1"></td>
                </tr>
                <AuthorizeView>
                    <Authorized>
                        <tr class="thead-light">
                            <td colspan="4"></td>
                            <td colspan="3">
                                <button class="btn btn-primary" @onclick="Checkout"
                                        style="width:30%;">
                                    Check Out
                                </button>
                            </td>
                        </tr>
                    </Authorized>
                    <NotAuthorized>
                        <tr class="thead-light">
                            <td colspan="4"></td>
                            <td colspan="3">
                                <button class="btn btn-primary" @onclick="Checkout"
                                        style="width:30%;">
                                    Sign In To Check Out
                                </button>
                            </td>
                        </tr>
                    </NotAuthorized>
                </AuthorizeView>

            </tfoot>
        }

    </table>
</div>
@code {

    public List<CartModel> Cart { get; set; } = new List<CartModel>();
    private decimal totalTax = 0;
    private decimal totalSubTotal = 0;
    private decimal totalTotal = 0;
    private int totalItems = 0;

    protected override async Task OnInitializedAsync()
    {
        Cart = await sessionStorage.GetItemAsync<List<CartModel>>("cart");
        CalcualteCartItems(Cart);
    }

    private void CalcualteCartItems(List<CartModel> cart)
    {
        totalTax = 0;
        totalSubTotal = 0;
        totalTotal = 0;
        totalItems = 0;
        foreach (var c in cart)
        {
            totalItems += c.Quantity;
            decimal tax = CalculateTax(c.Product.RetailPrice, c.Quantity);
            totalTax += tax;
            decimal subTotal = CalculateSubTotal(c.Product.RetailPrice, c.Quantity);
            totalSubTotal += subTotal;
            totalTotal += (tax + subTotal);
        }
    }

    private decimal CalculateSubTotal(decimal itemRetailPrice, int quantityPurchased)
    {
        decimal subTotal = itemRetailPrice * quantityPurchased;
        return subTotal;
    }

    private decimal CalculateTax(decimal itemRetailPrice, int quantityPurchased)
    {
       
        decimal taxRate = config.GetValue<decimal>("taxRate") / 100;

        decimal taxAmount = itemRetailPrice * quantityPurchased * taxRate;

        return taxAmount;
    }
    public async void HandleDeleteItem(CartModel cartItem)
    {
        Cart.Remove(cartItem);
        if (Cart.Count == 0)
        {
            await sessionStorage.SetItemAsync("cart", Cart);
            await sessionStorage.SetItemAsync("total", totalTotal);
        }
        else
        {

            CalcualteCartItems(Cart);
        }
    }
    public void HandleQuantityChange(CartModel cartItem)
    {
        int index = Cart.IndexOf(cartItem);
        Cart[index].Quantity = cartItem.Quantity;
        CalcualteCartItems(Cart);
    }
    private async void Checkout()
    {
        await sessionStorage.SetItemAsync("cart", Cart);
        await sessionStorage.SetItemAsync("total", totalTotal);


        if (string.IsNullOrEmpty(loggedInUser.EmailAddress))
        {
            navigationManager.NavigateTo("/login/1");
        }
        else
        {
            navigationManager.NavigateTo("/checkout");
        }

    }

}
